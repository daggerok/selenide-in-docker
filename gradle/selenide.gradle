/**
 * Selenide / drivers dependencies...
 */
dependencies {
  testImplementation("com.codeborne:selenide:$selenideVersion") {
    exclude module: "selenium-opera-driver"
    exclude module: "selenium-safari-driver"
    exclude module: "selenium-edge-driver"
    exclude module: "selenium-ie-driver"
    because "we don't wanna use any of these..."
  }
  ////and these are hopefully comes with selenide library as a transitive dependencies:
  //testImplementation("org.seleniumhq.selenium:selenium-chrome-driver:$seleniumDriverVersion")
  //testImplementation("org.seleniumhq.selenium:selenium-firefox-driver:$seleniumDriverVersion")
  testImplementation("com.codeborne:phantomjsdriver:$phantomjsDriverVersion")
}

static def findE2ESystemProps() {
  System.properties?.findAll { k, v ->
    [
        "remote",
        "BUILD_URL",
        "file.encoding",
        "selenide.browser",
        "selenide.headless",
        "webdriver"
    ].contains(k)
  }
}

test {
  def browser = System.getProperty("selenide.browser", "chrome" /*phanthomjs*/)
  def buildUrl = System.getenv()["BUILD_URL"]
  systemProperties = findE2ESystemProps()?: [:] + [
      "BUILD_URL": buildUrl,
      "file.encoding": "UTF-8",
      "selenide.browser": browser,
      "webdriver.chrome.verboseLogging": "true",
  ] + (
    project.hasProperty("remote") ? [ "remote": "http://127.0.0.1:4444/wd/hub" ] : [:]
  )
}

["firefox", "chrome", "phantomjs"].each { taskName ->
  Task e2eTestBrowserSelectorTask = tasks.create(name: taskName) {
    def systemProps = findE2ESystemProps()
    systemProps["selenide.browser"] = taskName

    doFirst {
      test {
        systemProperties = systemProps
      }
    }
  }
  test.shouldRunAfter(e2eTestBrowserSelectorTask)
}

task headless {
  def systemProps = findE2ESystemProps()
  systemProps["selenide.headless"] = true

  doFirst {
    test {
      systemProperties = systemProps
    }
  }
}

task headful {
  def systemProps = findE2ESystemProps()
  systemProps["selenide.headless"] = false

  doFirst {
    test {
      systemProperties = systemProps
    }
  }
}

test.shouldRunAfter headless, headful
